
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_URL")
}

model Users{
  id          Int @id @default(autoincrement())
  email       String @unique
  password    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("users")
}

model Terms{
  id          Int @id @default(autoincrement())
  number      Int @unique
  disciplines        Disciplines[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
 
  @@map("terms")
}

model Disciplines{
  id          Int @id @default(autoincrement())
  name        String @unique
  term        Terms @relation(fields: [termId], references: [id])
  termId      Int
  teachers    Teachers[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  tests Tests[]
 
  @@map("disciplines")
}

model Teachers{
  id          Int @id @default(autoincrement())
  name        String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  tests Tests[]
  disciplines Disciplines[]
 
  @@map("teachers")
}

model Categories{
  id          Int @id @default(autoincrement())
  name        String @unique
  tests       Tests[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
 
  @@map("categories")
}
model Tests{
  id          Int @id @default(autoincrement())
  name        String 
  pdfUrl      String
  Category Categories @relation(fields: [categoryId], references: [id])
  categoryId  Int
  teacherId Int
  teachers Teachers @relation(fields: [teacherId], references: [id])
  discipline Disciplines @relation(fields: [disciplineId], references: [id])
  disciplineId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
 
  @@map("tests")
}
